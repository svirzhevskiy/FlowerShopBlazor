@page "/Catalog"
@using FlowerShopBlazor.Models
@using FlowerShopBlazor.Common
@implements IDisposable
@inject AppState AppState
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject ToastService ToastService

@if (_products != null)
{
    <img class="show-filters-btn" src="img/filter.png" alt="filters" @onclick="ToggleShowFilters" />
    <div class="filter @(_showFilters ? "show" : "")">
        <h3>
            Filters
            <span
                class="clear-filters-btn"
                @onclick="ResetFilters">
                &#x2716;
            </span>
        </h3>
        @foreach (var (filter, items) in _catalogFilters)
        {
            <h4>@filter</h4>
            <CheckboxList Items="@items" OnToggle="item => { OnToggleFilterItem(filter, item); }"/>
        }
        <Button Class="hide-filters-button" OnClick="ToggleShowFilters">CLOSE</Button>
    </div>

    <div class="grid">
        @if (_products.Count > 0)
        {
            foreach (var product in _products)
            {
                <ProductCard Model="@product"/>
            }
        }
        else
        {
            <span>Nothing to show</span>
        }
    </div>
}

@code {
    private List<ProductModel> _products;
    private CategoryModel _category;
    private (int, int) _priceBorders = (0, 100);
    
    protected override async Task OnInitializedAsync()
    {
        _category = (await CategoryService.GetAll()).First();
        
        _products = await ProductService.GetAll(_category.Id);

        _catalogFilters = _category.Properties.ToDictionary(filter 
            => filter, filter => ProductService.GetPropertyValues(filter));
        
        _priceBorders.Item1 = _products.Min(x => x.Price);
        _priceBorders.Item2 = _products.Max(x => x.Price);
        _priceRange = _priceBorders;
    }

    private (int, int) _priceRange;
    private Dictionary<string, Dictionary<string, bool>> _catalogFilters;
    private void OnToggleFilterItem(string filter, string item)
    {
        _catalogFilters[filter][item] = !_catalogFilters[filter][item];
        
        _products = ProductService.Filter(_catalogFilters, _priceRange);
    }
    private void ResetFilters()
    {
        _priceRange = _priceBorders;

        _catalogFilters = _category.Properties.ToDictionary(filter 
            => filter, filter => ProductService.GetPropertyValues(filter));

        _products = ProductService.Filter(_catalogFilters, _priceRange);
        
        ToastService.ShowToast("Filters have been reset", ToastType.Success);
    }

    private bool _showFilters;
    private void ToggleShowFilters() => _showFilters = !_showFilters;


    private async Task AppState_StateChanged(ComponentBase source, string property)
    {
        if (source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }
    protected override void OnInitialized()
    {
        AppState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
    }
    void IDisposable.Dispose()
    {
        AppState.StateChanged -= async (source, property) => await AppState_StateChanged(source, property);
    }
}